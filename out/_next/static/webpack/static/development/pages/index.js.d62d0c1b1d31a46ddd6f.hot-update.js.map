{"version":3,"file":"static/webpack/static/development/pages/index.js.d62d0c1b1d31a46ddd6f.hot-update.js","sources":["webpack:///./pages/home/Home.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Color from 'color';\nimport hexColorRegex from 'hex-color-regex';\nimport { useDebounce } from 'use-debounce';\nimport randomColor from 'randomcolor';\nimport { ChromePicker } from 'react-color';\nimport Ink from 'react-ink';\n\nimport LayoutMain from '../../layouts/LayoutMain';\nimport Text from '../../components/Text';\nimport Input from '../../components/Input';\nimport Spinner from '../../components/Spinner';\n\nconst Wrapper = styled.div`\n  padding: 20px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst InputWrapper = styled.div`\n  margin-bottom: 20px;\n  display: flex;\n`;\n\nconst StyledInput = styled( Input )`\n  max-width: 170px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nconst StyledChromePicker = styled( ChromePicker )`\n  position: relative;\n  z-index: 10;\n`;\n\nconst ColorName = styled.div`\n  padding: 10px 20px;\n  min-height: 50px;\n  border-radius: 25px;\n  box-shadow: 0 5px 20px rgba(0,0,0,0.15);\n  max-width: 240px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 20px;\n  border: 0;\n  cursor: pointer;\n  transition: 200ms ease transform;\n  position: relative;\n\n  :hover,\n  :focus,\n  :active {\n    outline: 0;\n    transform: scale(1.05);\n  }\n\n  ${props => `\n    background-color: ${props.backgroundColor};\n    color: ${props.color};\n  `}\n`;\n\nconst InputColor = styled.button`\n  height: 50px;\n  width: 50px;\n  border-radius: 50%;\n  margin-left: 20px;\n  box-shadow: 0 5px 20px rgba(0,0,0,0.15);\n  cursor: pointer;\n  transition: 200ms ease transform;\n  border: 0;\n  position: relative;\n\n  :hover,\n  :focus,\n  :active {\n    outline: 0;\n    transform: scale(1.1);\n  }\n\n  ${props => `\n    background-color: ${props.backgroundColor};\n    color: ${props.color};\n  `}\n`;\n\nconst Picker = styled.div`\n  position: absolute;\n  zIndex: 10;\n`;\n\nconst PickerBackdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nfunction Home() {\n  const { initialValue } = this.props;\n\n  const [isFetching, setFetching] = useState( false );\n  const [error, setError] = useState( null );\n  const [colorName, setColorName] = useState( null );\n  const [alternateColorName, setAlternateColorName] = useState( null );\n  const [value, setValue] = useState( initialValue );\n  const [isPickerOpen, setPickerOpen] = useState( false );\n  const [isShowingAlternateColorName, setShowingAlternateColorName] = useState( false );\n\n  const debouncedValue = useDebounce( value, 300 );\n\n  const isValidHex = value.length === 6 && hexColorRegex().test( `#${value}` );\n  const colorValue = isValidHex && Color( `#${value}` );\n\n  useEffect(() => {\n    if ( debouncedValue.length === 6 ) {\n      getColorName( debouncedValue );\n    }\n  }, [debouncedValue] );\n\n  function handleChangeValue( event ) {\n    handleChange( event.target.value );\n  }\n\n  function handleChangeColor( color ) {\n    handleChange( color.hex );\n  }\n\n  function handleChange( value ) {\n    let val = value;\n\n    if ( val.startsWith( '#' )) val = value.slice( 1 ); // Remove the first letter\n    if ( val.length > 6 ) return; // Set a max character limit\n    if ( !( new RegExp( /^\\w*$/ ).test( val ))) return; // Remove symbols etc.\n\n    setValue( val );\n\n    if ( val.length < 6 ) setColorName( null ); // Reset the color name\n  }\n\n  async function getColorName( hex ) {\n    setFetching( true );\n    setColorName( null );\n    setError( null );\n\n    if ( window.ntc ) {\n      const alternateColorName = window.ntc.name( `#${hex}` )[1];\n\n      setAlternateColorName( alternateColorName );\n    }\n\n    try {\n      const response = await fetch( `https://api.color.pizza/v1/${hex}` );\n      const { colors, error } = await response.json();\n\n      if ( error ) setError( error.message );\n      else setColorName( colors[0].name );\n    }\n    catch ( error ) {\n      // eslint-disable-next-line no-console\n      console.warn( error );\n\n      setError( error.toString());\n    }\n    finally {\n      setFetching( false );\n    }\n  }\n\n  return (\n    <LayoutMain>\n      <Wrapper>\n        <InputWrapper>\n          <StyledInput\n            type=\"text\"\n            name=\"hex\"\n            onChange={handleChangeValue}\n            autoComplete=\"off\"\n            icon=\"hashtag\"\n            value={value}\n          />\n\n          <InputColor\n            onClick={() => setPickerOpen( true )}\n            backgroundColor={`#${isValidHex ? value : 'ffffff'}`}\n            color={( colorValue && colorValue.isDark() && 'white' ) || 'black'}\n          >\n            <Ink />\n          </InputColor>\n\n          {isPickerOpen && (\n            <Picker>\n              <PickerBackdrop onClick={() => setPickerOpen( false )} />\n\n              <StyledChromePicker\n                color={`#${isValidHex ? value : 'ffffff'}`}\n                onChange={handleChangeColor}\n                disableAlpha\n              />\n            </Picker>\n          )}\n        </InputWrapper>\n\n        <ColorName\n          backgroundColor={error ? 'red' : ( colorValue ? colorValue.hex() : 'white' )}\n          color={( colorValue && colorValue.isDark() && 'white' ) || 'black'}\n          onClick={() => setShowingAlternateColorName( !isShowingAlternateColorName )}\n          as={alternateColorName === colorName ? 'div' : 'button'}\n        >\n          <Ink />\n\n          {isFetching ? (\n            <Spinner color={( colorValue && colorValue.isDark() && 'white' ) || 'black'} />\n          ) : error ? (\n            <Text color=\"white\" align=\"center\">\n              {String( error )}\n            </Text>\n          ) : (\n            <Text color={( colorValue && colorValue.isDark() && 'white' ) || 'black'} align=\"center\">\n              {( isShowingAlternateColorName && alternateColorName ) || colorName || 'No color'}\n            </Text>\n          )}\n        </ColorName>\n\n        <Text color=\"#787c84\" size=\"xxs\" align=\"center\" opacity={alternateColorName === colorName ? 0 : 1}>\n          Click the color name to view an alternate\n        </Text>\n      </Wrapper>\n    </LayoutMain>\n  );\n}\n\nHome.getInitialProps = () => {\n  const initialValue = randomColor().slice( 1 );\n\n  return { initialValue };\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAMA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAzCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AA0CA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAVA;AAAA;AAAA;AACA;AADA;AAYA;AAZA;AAAA;AACA;AADA;AAAA;AAaA;AAAA;AAEA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AAEA;AACA;AAvBA;AAAA;AAyBA;AAzBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1CA;AAAA;AACA;AAsEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}